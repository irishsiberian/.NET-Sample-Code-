//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("ExchangeRatesDataModel", "FK_ExchangeRatesHistory_ExchangeRatesHistory", "Currency", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ExchangeRatesStatistic.MVC.DAL.Currency), "ExchangeRatesHistory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ExchangeRatesStatistic.MVC.DAL.ExchangeRatesHistory), true)]

#endregion

namespace ExchangeRatesStatistic.MVC.DAL
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class ExchangeRatesDataModelContainer : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new ExchangeRatesDataModelContainer object using the connection string found in the 'ExchangeRatesDataModelContainer' section of the application configuration file.
        /// </summary>
        public ExchangeRatesDataModelContainer() : base("name=ExchangeRatesDataModelContainer", "ExchangeRatesDataModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new ExchangeRatesDataModelContainer object.
        /// </summary>
        public ExchangeRatesDataModelContainer(string connectionString) : base(connectionString, "ExchangeRatesDataModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new ExchangeRatesDataModelContainer object.
        /// </summary>
        public ExchangeRatesDataModelContainer(EntityConnection connection) : base(connection, "ExchangeRatesDataModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Currency> Currencies
        {
            get
            {
                if ((_Currencies == null))
                {
                    _Currencies = base.CreateObjectSet<Currency>("Currencies");
                }
                return _Currencies;
            }
        }
        private ObjectSet<Currency> _Currencies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ExchangeRatesHistory> ExchangeRatesHistories
        {
            get
            {
                if ((_ExchangeRatesHistories == null))
                {
                    _ExchangeRatesHistories = base.CreateObjectSet<ExchangeRatesHistory>("ExchangeRatesHistories");
                }
                return _ExchangeRatesHistories;
            }
        }
        private ObjectSet<ExchangeRatesHistory> _ExchangeRatesHistories;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Currencies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCurrencies(Currency currency)
        {
            base.AddObject("Currencies", currency);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ExchangeRatesHistories EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToExchangeRatesHistories(ExchangeRatesHistory exchangeRatesHistory)
        {
            base.AddObject("ExchangeRatesHistories", exchangeRatesHistory);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ExchangeRatesDataModel", Name="Currency")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Currency : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Currency object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="serviceCode">Initial value of the ServiceCode property.</param>
        public static Currency CreateCurrency(global::System.Int32 id, global::System.String name, global::System.String serviceCode)
        {
            Currency currency = new Currency();
            currency.Id = id;
            currency.Name = name;
            currency.ServiceCode = serviceCode;
            return currency;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ServiceCode
        {
            get
            {
                return _ServiceCode;
            }
            set
            {
                OnServiceCodeChanging(value);
                ReportPropertyChanging("ServiceCode");
                _ServiceCode = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ServiceCode");
                OnServiceCodeChanged();
            }
        }
        private global::System.String _ServiceCode;
        partial void OnServiceCodeChanging(global::System.String value);
        partial void OnServiceCodeChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ExchangeRatesDataModel", "FK_ExchangeRatesHistory_ExchangeRatesHistory", "ExchangeRatesHistory")]
        public EntityCollection<ExchangeRatesHistory> ExchangeRatesHistories
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ExchangeRatesHistory>("ExchangeRatesDataModel.FK_ExchangeRatesHistory_ExchangeRatesHistory", "ExchangeRatesHistory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ExchangeRatesHistory>("ExchangeRatesDataModel.FK_ExchangeRatesHistory_ExchangeRatesHistory", "ExchangeRatesHistory", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ExchangeRatesDataModel", Name="ExchangeRatesHistory")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ExchangeRatesHistory : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ExchangeRatesHistory object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="date">Initial value of the Date property.</param>
        /// <param name="currencyId">Initial value of the CurrencyId property.</param>
        /// <param name="currencyRate">Initial value of the CurrencyRate property.</param>
        public static ExchangeRatesHistory CreateExchangeRatesHistory(global::System.Int32 id, global::System.DateTime date, global::System.Int32 currencyId, global::System.Double currencyRate)
        {
            ExchangeRatesHistory exchangeRatesHistory = new ExchangeRatesHistory();
            exchangeRatesHistory.Id = id;
            exchangeRatesHistory.Date = date;
            exchangeRatesHistory.CurrencyId = currencyId;
            exchangeRatesHistory.CurrencyRate = currencyRate;
            return exchangeRatesHistory;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private global::System.DateTime _Date;
        partial void OnDateChanging(global::System.DateTime value);
        partial void OnDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CurrencyId
        {
            get
            {
                return _CurrencyId;
            }
            set
            {
                OnCurrencyIdChanging(value);
                ReportPropertyChanging("CurrencyId");
                _CurrencyId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CurrencyId");
                OnCurrencyIdChanged();
            }
        }
        private global::System.Int32 _CurrencyId;
        partial void OnCurrencyIdChanging(global::System.Int32 value);
        partial void OnCurrencyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double CurrencyRate
        {
            get
            {
                return _CurrencyRate;
            }
            set
            {
                OnCurrencyRateChanging(value);
                ReportPropertyChanging("CurrencyRate");
                _CurrencyRate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CurrencyRate");
                OnCurrencyRateChanged();
            }
        }
        private global::System.Double _CurrencyRate;
        partial void OnCurrencyRateChanging(global::System.Double value);
        partial void OnCurrencyRateChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ExchangeRatesDataModel", "FK_ExchangeRatesHistory_ExchangeRatesHistory", "Currency")]
        public Currency Currency
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("ExchangeRatesDataModel.FK_ExchangeRatesHistory_ExchangeRatesHistory", "Currency").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("ExchangeRatesDataModel.FK_ExchangeRatesHistory_ExchangeRatesHistory", "Currency").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Currency> CurrencyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("ExchangeRatesDataModel.FK_ExchangeRatesHistory_ExchangeRatesHistory", "Currency");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Currency>("ExchangeRatesDataModel.FK_ExchangeRatesHistory_ExchangeRatesHistory", "Currency", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
